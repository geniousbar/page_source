---
title: CSAPP
date: 2017-12-02
tags: csapp
---

深入理解计算机系统
--------

计算机系统漫游
---------

1. 代码从文本到可执行文件的过程（c语言示例）：
  * 预处理阶段，处理 #inlcude <stadio.h>， #define MAX 100
  * 编译阶段：将文本编译成汇编程序，hello.s
  * 汇编阶段：汇编器将上一步的程序翻译成机器指令。hello.o
  * 链接阶段就：hello 中调用的printf函数，而函数存在一个printf.o 单独的编译完成文件，需要以某种方式合并到hello.o 中。
2. 系统的硬件组成
  * 总线
  * I/O设备
  * 主存
  * 处理器， 指令集合： 加载(复制内容到寄存器）， 存储（从寄存器到存储），操作（加减乘除等计算）， 跳转（覆盖程序计数器PC的数值，执行代码跳转）
  * 缓存， 高速缓存
3. 操作系统如何管理硬件
  * 任何的硬件通过操作系统提供服务， 所有应用程序都是建立在操作系统之上的。
  * OS 的基本功能： 1. 方式硬件被滥用， 2. 提供一套简单一致的机制来控制复杂度而又大相径庭的低级硬件设备。
  * OS 的抽象： 文件 -> IO， 虚拟存储器 -> 主存+磁盘， 进程 -> 处理器，主存，IO设备的抽象
4. 抽象
  * 进程： 计算机科学中最重要并且成功的概念。
    > 提供一种假象， 好像系统上只有这个程序在运行，看上去只有这个程序在使用处理器、主存、和IO设备. 这是通过处理器在进程间切换来实现的。  操作系统实现这种交错执行的机制为 **上下文切换**, 实现进程这个抽象概念需要低级硬件和操作系统软件之间的紧密合作。

  * 线程：每个线程都运行在进程的上下文中，并共享同样的代码和全局数据，服务器对于并行处理的需求，导致线程编程成为越来越重要的编程模型， 一般来说，多线程之间更容易共享数据，也比进程更轻量。
  * 虚拟存储器： 为进程提供了一个抽象、一致的存储空间，称为虚拟地址空间。包括： 程序代码和数据，堆，共享库，栈，内核虚拟存储器。
  * 文件： 字节序列。包括磁盘，键盘，显示器，网络，都可以视为文件。
  * 并行跟并发的区分： 并发: **好像** 同时具有多个活动在系统中。 并行：真正的并行。
  * 抽象： 抽象的使用是计算机科学中最为重要的概念之一，因为，程序员无需了解它内部的工作变可以使用这些代码。在处理器中，指令集结构提供了对实际处理器硬件的抽象。机器代码程序表现的好像是运行在一个一次执行一条指令的处理器上。底层的硬件币抽象描述的要复杂精细的多，它并行的执行多条指令，但又总是与那个简单有序的模型保持一致。


  ---------------------进程---------------------
  |                                            |
  |----指令集结构-----|---------虚拟存储器--------|
  |                 |-----------|-----文件-----|
  |   处理器         |  主存      |    I/O 设备  |

  **计算机系统中一个重大的主题就是  提供不同层次的抽象表示，来 隐藏实际实现的复杂性**


信息的表示和处理
-------------

因为只是介绍了二进制、无符号数、有符号数、以及小数的表示方法， 计算机教程中都有介绍，所以省略不写了。只是简单的摘录重要的。

1. 在相同长度的无符号和有符号整数之间 进行强制类型转换时候，大多数C语言实现遵循 原则是 底层的位模式不变。而是改变位的解释方法。
2. 编码的存储长度有限。可能导致数值溢出。需要非常注意。
3. 整数和浮点数的表示方法，有所区别，导致， 整数可以进行移位、结合等优化方法，但是浮点数则不行，如 x * y * z 不等于 y * z * x 需要注意



程序的机器级别表示
------------------

**精通细节是理解更深和更基本概念的先决条件， 所以魔鬼隐藏在细节之中。***

1. 机器代码的产生过程
 > 机器代码， 用字节序列编码低级的操作，包括处理数据、管理存储器、读写存储设备上的数据、以及利用网络通信。 编译器机基于编程语言的原则、目标机器的指令和操作系统遵循的原则， 经过一系列的阶段产生机器代码。GCC C语言编译器以汇编代码的形式产生输出，然后调用 汇编器和链接器从而根据汇编代码生成可执行的机器代码。

2. 主要内容：
  * 了解C语言中的控制结构， 比如if while switch 语句的实现方法。
  * 过程的实现， 包括程序如何维护一个运行栈来支持过程间数据和控制的传递以及局部变量的存储
  * 数组、结构、联合这样的数据结构的实现方法

3. 抽象：
  * 指令集体系结构（ISA）： 屏蔽了处理器的硬件实现，将指令的执行描述为，简单的顺序执行
  * 存储抽象： 抽象成一个大的字节数组，存储器的实现是，将多个硬件存储器和操作系统软件的结合
4. 指令集：
  * 寄存器

      |%eax         %ax|%ah   |%al    |
      |----------------|--------------|
      |%ecx         %cx|%ch   |%cl    |
      |----------------|--------------|
      |%edx         %dx|%dh   |%dl    |
      |----------------|--------------|
      |%ebx         %bx|%bh   |%bl    |
      |----------------|--------------|
      |%esi         %si|              |
      |----------------|--------------|
      |%edi         %di|              |
      |----------------|--------------|
      |%esp         %sp|              | 栈指针
      |----------------|--------------|
      |%ebp         %bp|              | 帧指针

  * 指令操作数:
    * 源数据： 常数、寄存器、存储器
    * 类型： 立即数（常数）、寄存器(Ea)、存储器

  * 数据传送指令: MOV
  * C语言的指针就是地址，间接引用指针就是将该指针放在一个寄存器中，然后在存储器引用中，使用这个寄存器， 局部变量通常保存在寄存器中。
  * 取址： leal,
  * 条件码：cmp, test, sete, sets, setg etc...
  * 跳转指令：jmp,
  * 算数操作： imull, mull, idivl, divl
  * 栈： push, pop
