---
title: linux-interface-02
date: 2018-12-06
tags: linux, books
---
The linux programming interface
----------

## 系统编程概念

无论何时，执行了系统调用或者库函数，检查调用的返回状态以确定调用是否成功,是一条编程铁律。(消灭nil就好了)

### 系统调用
  >   借助这一机制，进程可以请求内核以自己的名义去执行动作，以API 的形式，内核提供一系列服务供程序访问。（创建进程， IIO操作等）可以参考 csapp中的 异常控制流章节。

  系统调用有以下特征：
  1. 系统调用将CPU 从用户态切换到 内核态，以便CPU访问受保护的内存等（越过保护机制）
  2. 系统调用的组成是固定的。每个系统调用都由一个唯一的数字来标识。（程序通过名称标识系统调用，对编号方案无需关心）
  3. 每个系统调用都有一套对应的参数，对用户态内核态的参数传递有一定规范
  下面是一个系统调用的示例：
  1. 应用程序调用C语言的函数库中的外壳（wrapper） 函数，来发起系统调用
  2. 外壳函数保证所有的系统调用参数可用，并将参数复制到寄存器
  3. 外壳函数会将系统调用编号复制到%eax中，用于区分不同的系统调用
  4. 外壳函数执行一条中断机器指令，引发CPU从用户态切换到内核态，并执行 todo
  5. 内核调用 system_call 来处理中断，
    1) 在内核栈中保存寄存器数值
    2）验证 系统调用的 编号有效性
    3) 通过系统调用编号 发现对应的系统调用服务例程，检查参数的有效性，执行对应的代码逻辑。最后将结果状态返回给system_call
    4) 从内核栈中回复各个寄存器值，并将系统调用返回值置于栈中
    5) 返回值外壳函数，通知讲CPU切换到用户态
  6. 系统调用的服务例程返回值代表调用有误， 外壳函数会使用该值设定全局变量errno。外壳函数会返回到调用程序，并返回一个整数，标志系统调用是否成功。
  
