---
title: Art of programming
date: 2017-10-21
tags: unix, linx, art
---

The Art of unix programming
--------

#### 哲学
  * 哲学基础：

   > unix 哲学并不算是一种正规设计方法， 不打算从计算机科学的理论高度产生出完美的软件， 那些毫无动力、松松垮垮的，薪水微薄的程序员，能在短短期限内，如同神灵附体般的创造出稳定而又新颖的软件， 这只不过是经理人永远的梦呓罢了。  (社会经济学基础)
   unix 哲学，是自下而上的，注重实效，立足于丰富的经验，你不会在正规的方法学和标准中找到她，她更接近与隐性的 半本能知识，UNIX 文化所传播的 专业经验。

    1. 你无法判断程序会在什么地方耗费运行时间，瓶颈经常会出现在想不到的地方，所以别急于胡乱找个地方改代码，除非你已经证实哪儿就是瓶颈所在。
    2. 估量，在没有对代码进行估量，别去优化速度。
    3. 花哨的算法在n很小的时候通常很慢，而n通常很小，花哨算法的常数复杂度很大，除非你确定n总是很大，否则不要使用花哨算法。
    4. 花哨算法相比于简单算法，通常更容易出bug，更难实现，尽量使用简单的算法配合简单的数据结构
    5. 数据压倒一切，正确的算法不言自明，编程的核心是数据结构，而不是算法。
    6. 没有原则 6
    Ken Thompson 对第4点进行了，强调， 拿不准就穷举

    1. 模块原则： 使用简洁的接口拼合简单的部件
       计算机编程的本质是控制复杂度。要编制复杂的软件而又不至于一败涂地的唯一方法就是降低其整体复杂度----- 用清晰的接口把若干简单的模块组合成一个复杂软件，如此一来，多数问题，只会局限于局部，而不是牵一发而动全身。
    2. 清晰原则： 清晰胜于机巧
    3. 组合原则： 设计时考虑拼接组合
      多数程序都尽可能采用过滤器的形式， 即将一个输入的简单文本流处理为一个简单的文本流输出.
    4. 分离原则： 策略同机制分离，接口同引擎分离
    5. 简洁原则： 设计要简洁，复杂度能低就底
    6. 吝啬原则： 除非确无它法， 不要编写庞大的程序
    7. 透明性原则： 设计要可见， 以便于审核和测试
    8. 健壮原则： 健壮源于透明性与简洁
    9. 表示原则： 把知识深入到数据以求逻辑质朴而健壮
      数据要比编程逻辑更容易驾驭，在设计中，你应该主动的将代码的复杂度转移到数据中
    10. 通俗原则： 接口设计避免标新立异
      最少惊奇原则
    11. 缄默原则： 如果一个程序没什么好说，就沉默
    12. 补救原则： 出现异常是，立马退出并给出错误信息
    13. 经济原则： 宁化机器一份，不花程序员一秒
    14. 生成原则： 避免手工hack， 尽量编写程序生成代码
    15. 优化原则： 雕琢之前先得有原型，跑之前先学会走
      过早优化是万恶之源， 先只做原型，在进行细琢，优化之前先确保能用。
    16. 多样原则： 绝不相信所谓的不二法门，
    17. 扩展原则： 设计招眼未来，未来总是比预想快
      设计代码时候， 需要很好的组织， 让将来的开发者增加新功能是无需拆毁或重建整个架构，当然这个原则并不是说你能随意的增加根本用不上的功能。而是建议在编写代码时候考虑未来的需要，使以后增加功能比较容易，程序结合更灵活。
      其实其中很不容易取舍。
    18. KISS keep it simple, stupid
    19. 
