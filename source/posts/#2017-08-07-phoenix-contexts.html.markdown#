---
title: Phoenix framework 1.3 context
date: 2017-08-07
tags: phoenix, elixir, desigin
---

Design
--------

### 思考设计

  context 是专门用来 组织、暴露 相关的功能的module。比如我们每次调用Elixir标准库 Logger.info, 其实是在接触不同的context， 在内部， Elixir Logger是由 诸如 Logger.Config. Logger.Backends 的module组成的， 但是我们从来不会直接跟这些module交互， 我们使用Logger context， 因为他组织并且暴露接口。
  Phoenix 组织目录类似于其他的Elixir Project， 我们拆分代码到context中， 一个context 将会组织相关的功能代码， 比如post，comment， 经常封装诸如 验证、数据存取的功能。应用context, 我们拆分系统到 容易管理、互相独立的 组成部分中。

### 建立Account context
  * user 是 系统中广泛接触的，以至于需要思考设计 接口。 我们的目标是设计一个 Account API 处理创建、更新、删除user、包括用户验证。 我们以基本的功能开始，然后逐步添加功能。
  * Phoenix 包含了 phx.gen.html, phx.gen.json, phoenix.gen.context 脚手架来支持 拆分 应用功能到 contex中， 这些脚手架有力的推动了在 应用变大 的时候，朝着正确的方向上前进。
  * 为了使用 context 脚手架， 我们需要想出一个module名字，来组织相关的功能。在Ecto Guide中，我们使用Changesets 和Repo 来验证，存储user， 但是当应用变大的时候，我们不会使用这些在应用中。事实上，我们从来不会想， user应该存在于应用的什么地方，退回重新思考一下 应用中个个组成部分的不同。 在用户 需要账户登录，验证，和注册的情况下，Account context 是一个最好的地方来存放相关的功能。

  ```elixir
    mix phx.gen.html Accounts User user users name:string username:string:unique
    resources "/users", UserController
    mix ecto.migrate

    scopes "/" HelloWeb do
      pipe_through :browser

      get "/", PageController, :index
      resources "/users", UserController
    end
  ```
  * Phoenix 生成的web相关的文件， 在 lib/hello_web/中， context文件在 lib/hello/accounts 中， 注意 这个区别， 我们使用Accounts module来管理account相关的功能， Accounts.User struct 是Ecto 来转换、验证的user的模型，

### starting with Generators
  * phx.gen.html  脚手架 生成了一个开箱能用的 创建，更新，删除用户。离真正的app很远。但是脚手架 是第一个也是最重要的 开始真正构建真是的功能的 学习工具和开始的地方。 脚手架不能解决所有问题，但是依然可以教你朝着一个正确的方向 来思考设计你的应用 。

  ``` elixir
  defmodule HelloWeb.UserController do
    use HelloWeb, :controller
    alias Hello.Accounts

    def index(conn, _params) do
      users = Accounts.list_users()
      render(conn, "index.html", users: users)
    end

    def new(conn, _params) do
      changeset = Accounts.change_user(%Hello.Accounts.User{})
      render(conn, "new.html", changeset: changeset)
    end

    def create(conn, %{"user" => user_params}) do
      case Accounts.create_user(user_params) do
        {:ok, user} ->
          conn
          |> put_flash(:info, "user create success")
          |> redirect(to: user_path(conn, :show, user))
        {:error, %Ecto.Changeset{} = changeset} ->
          render(conn, "new.html", changeset: changeset)
      end
    end
  end
  ```
  * 我们注意的是， Controller如何调用Accounts context，我们可以看到index action，通过Accounts.list_users获取一系列用户，通过Accounts.create_user调用 实现创建用户，我们并不知道 Accounts，创建、获取的实现方法，然而这才是重要的， Phoenix Controller， 就是web interface， 她并不关系 关于如何获取用户， 创建的细节。我们只关心　告诉我们的应用为我们执行一些任务。我们将业务逻辑存储引擎通过web　层分离开来，如果我们转移到一个全文索引来代替sql查询，我们的Controller不需要改动。
  * 在这个create示例中，当我们成功的创建了一个用户，我们调用Phoenix.Controller.push_flash　来展示成功的消息　然后重定向到user_path　，　如果失败了，　我们渲染"new.html"模板，并且传递Ecto.changeset　来传递错误信息
  * 下面，我们会更深入的挖掘Account　context　
  * 在这个帐号管理系统中，我们可能需要处理用户登录凭证，用户喜好，和密, 码重置等。如果我们深入到list_users 函数中，我们可以看到获取用户的细节，Repo.all(User), 意图是对caller隐藏从Postgresql获取的细节，　这是Phoenix　生成器一个常见的主题。Phoenix会驱动我们去思考，系统中不同的组成部分，然后包装这些不同的部分到Well-named　的module中、function　让我们代码的意图更加清晰，同时屏蔽细节。
  
### In-context relationship
　* 我们基础的用户功能实现的非常好，让我们补充实现用户登录，我们不会实现一个完整的认证系统，而只是给我们一个系统成长的好的开始。许多的验证系统的解决方案是　凭证跟用户是一对一的。这样经常造成问题，比如支持不同的登录方式，例如social的给你路， email邮箱登录。将会造成主要代码逻辑改变，我们要建立一个凭证、用户一对一，但是容易支持其他功能。
  * 就当前，用户凭证之包含email信息，我们地一个任务是决定凭证放在哪里。我们有Accounts context，用户凭证适合放在这里。Phoenix也足够聪明在已经存在的context生成代码
  > mix phx.gen.context Accounts Credenttial credentials email:string:unique user_id:references:users 
  我们使用phx.gen.context 区别与 phx.gen.html 除了不会生成 html，因为我们已经有了Controller
  Template 
  我们可以从输出看到Phoenix为我们的Accounts.Credential 生成了 accounts/credential.ex , 还有migration
  在执行迁移之前，我们需要修改生成的迁移文件。我们需要删除用户的凭证，当删除用户的时候，执行下面的改动
  ```elixir
  def change do 
      create table(:credentials) do 
        add :email, :string
        add :user_id, references(:users, on_delete: :nothing)
        add :user_id, references(:users, on_delete: :delete_all), null: false
        timestamps()
      end
      
      create uniqu_index(:credentials, [:email])
      create index(:credentials, [:user_id])
  end
  ```
  我们将:on_delete 从nothing 改变为:delete_all，这就会生成外键约束，约束会删除所有的用户凭证，当用户删除的时候, 我们设定null: false 来阻止 创建没有关联用户的凭证创建。应用数据库约束，我们在数据层面限制data， 而不是在应用层面。
  在我们与web 层面交互之前，我们需要 让我们的context 知道关联的user 和credentials ， 编辑lib/accoutns/user.ex
  ```elixir

      alias Hello.Accounts.{User, Credential}
      
      schema "users" do 
        field :name, :string
        field :username, :string
        has_one :credential, Credential
        timestamps()
      end
  ```
  我们使用Ecto.Schema's has_one macro来让Ecto知道如何关联User and Credential， 同样的编辑accounts/credential.ex
  ```elixir
      alias Hello.Accounts.{Credential, User}
      schema "credential" do 
        field :email, :string
        field :user_id, :id
        belongs_to :user, User
        timestamps()
      end
  ```
  ```elixir
      def list_users do
        User 
        |> Repo.all()
        |> Repo.preload(:credenttial)
      end
      
      def get_user!(id) do 
        User 
        |> Repo.get!(id)
        |> Repo.preload(:credential)
      end
  ```
  我们重写了list_user 和get_user以便于主动加载credential 关联关系，无论什么时候我们获取用户，Repo.preload 函数获取schema的关联关系。当我们操作一个集合，比如list_users， Ecto可以高效的预加载关联关系在一个sql中， 这允许我们直接调用credients，而不需要额外的 查询。
  下面我们在页面中加入credential
  ```
+ <div class="form-group">
+   <%= inputs_for f, :credential, fn cf -> %>
+     <%= label cf, :email, class: "control-label" %>
+     <%= text_input cf, :email, class: "form-control" %>
+     <%= error_tag cf, :email %>
+   <% end %>
+ </div>

  <div class="form-group">
    <%= submit "Submit", class: "btn btn-primary" %>
  </div>
  ```
  使用 Phoenix.HTML's inputs_for 函数来添加一个关联的嵌套的fields， 在嵌套的inputs中，我们渲染了 credfential‘s 的email error_tag 等。
  展示用户的user 的email地址在用户的show页面中。添加下面的代码到show.html.eex中 
  ```
+ <li>
+   <strong>Email:</strong>
+   <%= @user.credential.email %>
+ </li>
</ul>
  ```
  现在如果我们访问users/new 我们会看到email的输入框，如果保存，你会发现email自大un被护士了，没有验证告诉你字段没有被保存。
  我们是哟个Ecto's belongs_to has_one 关联关系来贯穿起来，为了关联用户输入到数据库，我们需要在changeset中处理，改动Accounts context中的create_user , update_user 函数。
  ```elixir
      def update_user(%User{} = user, attrs) do 
        user 
        |> User.changeset(attrs)
        |> Ecto.Changeset.cast_assoc(:credential, with: &Credential.changset/2)
        |> Repo.update()
      end
      
      def create_user(attrs \\ %{}) do 
        %User{}
        |> User.changset(attrs)
        |> Ecto.Changeset.cast_assoc(:credential, with： &Credential.changset/2)
        |> Repo.insert()
      end
  ```
  Ecto's cast_assoc 告诉changset如何转换用户的输入到schema 关系中。我们使用with告诉changset使用Credential.changeset函数来转换用户输入，这样，Credential.changset 中所有的验证会应用到 User中。
  最后，我们可以测试，会见到Email的验证。
  
### Adding Account functions
    如你所见， context是一个包粗一组相关函数的module， Phoenix 生成一般的函数， 例如list_users, upate_users, 但是他们只提供一个基础的，为了使用一些真是的功能来扩展我们的Account context， 让我们修复我们应用中的明显的问题， -我们可以创建带有凭证的用户，但是却无法使用凭证登录，建立一个负载的完整的用户验证系统超出了本书的范围，让我们着手建立一个基于email的登录页面来跟踪用户的session， 这会让我们聚焦在Accounts context上， 并且给你一个建立完成的认证系统上一个好的开始。
    首先，开始想名字，为了使用email地址来验证用户，我们需要一个方法来查找用户和验证凭证是否正确，我们只暴露一个函数来完成这件事情。
    